#分布式版本控制系统-Git


$gradle product build -x test dev
导出当前flow_admin项目命令

安装
Linux -- 一种是包管理器的方式直接安装（yum方式等） ，另外一种则为从源代码进行安装
Mac OS X -- 没有用过
Windows -- 安装 Cygwin来模拟linux使用git，另一种方式是安装msysGit(安装TortoiseGit和资源管理器整合)


$git --version 
查看当前git版本



$git config --global user.username "wangXiaodan"
$git config --global user.email "wangxiaodan@sheyuan.com"
设置当前git用户的用户名和邮箱地址，这些配置将在版本库提交时候用到。


#git config --system alias.st status
设置git命令的别名，方便录入（此命令必须有管理员权限），此条命令后 $git st  相当于命令  $git status


$git init 
如果当前目录不是git目录，此命令初始化当前目录为git仓库，会生成.git目录文件，这样才能进一步操作。

$git config -e 
$git config -e --global
$git config -e --system
查看系统当前的配置，优先级从高到底，目录级别、用户级别、系统级别,也可以这样设置config中的参数内容   git config user.name "内容"


$git status 
查看当前git仓库中的文件修改状态


$git add 
将修改的文件加入到Git暂存区

$git commit 
将Git暂存区中的修改提交到本地Git仓库


$git log [--stat]
查看提交日志,--stat可以查看每次修改变动


---------------------------------华丽分割线-----------------------------------------------



#Git暂存区（Stage）

$git status
查看当前工作区中的文件和暂存区中文件的区别，和暂存区中的和仓库中的文件的区别，此处的区别只有增删改标识，没有具体内容

$git diff <fileName>
比较当前工作区中的文件和暂存区中文件的差异，也可以使用参数HEAD比较工作区的文件和Git仓库中文件的差异,通过参数--staged（或 --cached ） 可以查看暂存区中文件和版本库中文件的差异，见图2。

$git checkout [commit] -- <fileName>
撤销工作区中修改的内容，还原为暂存区中的内容，如果当前暂存区没有内容，则还原为版本库中的内容。加 commit的时候就是将版本库中的文件替换到暂存区和工作区
$git checkout branch
切换分支
$git checkout -b branch [commit]
创建分支并切换到新创建的分支上，创建的分支是根据给定的版本库创建的





见图1
图中左侧为工作区，右侧为版本库。在版本库中标记为index的区域是暂存区，标记为master的是master分支所代表的目录树。针对此三个区域，有以下操作命令来操作和还原:
1.当对工作区修改或增加的文件执行 git add 命令时，暂存区中的目录树将被更新，同时工作区修改或新增的文件内容会被写入到对象库中的一个新的对象中，而该对象的ID被记录到暂存区的文件索引中。
2.当执行提交操作 git commit 时，暂存区的目录树会写到版本库中，master分支会做相应的更新，即master最新指向的目录树就是提交时原暂存区中的目录树。
3.当执行 git reset HEAD 命令时，暂存区的目录树会被重写，会被master分支指向的目录树所替换，但是工作区不受影响。
4.当执行 git rm --cached <fileName> 命令时，会直接冲暂存区删除文件，工作区则不做出改变。
5.当执行 git checkout . 或 git checkout -- <fileName> 命令时，会用暂存区全部的文件或指定的文件替换工作区的文件。这个操作很危险，会清楚工作区中未添加到暂存区的改动。
6.当执行 git checkout HEAD . 或 git checkout HEAD <fileName> 命令时，会用HEAD指向的master分支中的全部或部分文件替换暂存区和工作区中的文件。这个命令也是极具危险性的，因为不但会清楚工作区中未提交的改动，也会清除暂存区中未提交的改动。


$git stash
保存当前工作进度

什么是HEAD？ 什么是master？
HEAD是指向当前分支的一个指针，而master则是一个实实在在的分支（其实是指向最后一个提交或其他操作的游标）。

$git branch
显示当前分支列表并标记当前工作分支

$git reset --hard <版本号>
回退到某个已经提交的版本库,将工作区和暂存区中的文件都改变为版本库中的文件，HEAD引用重置到指定的版本号（属于下面的第二种用法）
$git reset HEAD -- fileName
不会重置HEAD引用，也不改变工作区，而是用指定提交状态下的文件替换掉暂存区中的文件（属于下面的第一种用法）
1：不重置HEAD引用，不修改工作区中的内容，只将指定commit版本中的内容替换掉暂存库中的内容
$git reset [-q] [<commit>] [--] <paths>..
2.重置HEAD引用； 
$git reset [--soft | --mixed | --hard ] [<commit>]
说明：--hard  参数：替换工作区内容，替换暂存区内容
--soft 参数：不替换工作区内容，不替换暂存区内容
--mixed 参数（默认参数）：不替换工作区内容，替换暂存区内容


$git reflog 
查看操作日志记录



$git merge <branch> 
将给定的分支和当前分支内容合并。



#


$git stash 
保存当前工作区和暂存区的内容，并恢复到当前commit的最新版本。相当于保存工作区文件，然后执行 git reset --hard 命令
$git stash pop
还原之前保存的工作区内容，暂存区内容不变。并删除当前保存
$git stash apply
回复之前



$git tag -m "说明" 分支名称
将当前版本打一个里程碑。
$git describe
查看最新提交的一次里程碑


添加文件.gitignore 文件可以忽略不需要提交的文件，但是存在的问题是此文件只能影响到未添加到版本库中的文件，已经添加到版本库中的文件则不起作用。
要将添加到版本库中的文件起到忽略作用，需要将版本库中的文件删除，命令 $git rm --cached fileName 操作，然后提交。
或者本地执行 git update-index --assume-unchanged fileName 忽略修改。


$git blame fileName
追溯某个文件的提交，查看提交及提交内容



$git commit --amend
重新修改最近一次提交的备注语，并将当前暂存区中的文件提交


$git cherry-pick commit_version
将某个提交版本续接到当前HEAD指向的版本上


$git rebase --onto <newbase> <since> <till>
将提交since到till的提交嫁接到newbase提交上，不包含since提交，属于(since,till]


$git revert commit_version
反转提交，相当于对错误提交重新提交一次，只做提交说明，没有具体内容提交

$git gc 
自动清理版本库操作命令




$git clone <repository> 目录    
直接拷贝远程库和远程工作区
$git clone --bare  <repository> 目录   
$git clone --mirror <repository> 目录   
只拷贝远程仓库，没有工作区的存在



$git push <remote_url> :<tagname>
删除远程版本库中的里程碑



##分支名称
$git branch
查看本地所有分支

$git branch <branchName>
$git branch <branchName> <start-point>
创建分支


$git branch -d <branchName>
$git branch -D <branchName>
删除分支，-d只能删除已经合并到其他分支的分支，-D参数，及时要删除的分支没有合并到其他分支，照样能删除



$git branch -m <oldbranch> <newbranch>
$git branch -M <oldbranch> <newbranch>
重命名分支名称，新分支名称是否已经存在，如果存在，则-M强制执行。


$git cherry-pick otherBranchCommit   
拣选其他分支中的提交到当前分支
